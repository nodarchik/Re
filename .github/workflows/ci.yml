name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Backend tests
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: false
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
    
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Install dependencies
      working-directory: ./backend
      run: go mod download
    
    - name: Run tests
      working-directory: ./backend
      run: go test -v -race -coverprofile=coverage.out ./...
    
    - name: Run edge case test
      working-directory: ./backend
      run: go test -v ./internal/calculator -run TestCalculator_EdgeCase
    
    - name: Generate coverage report
      working-directory: ./backend
      run: go tool cover -html=coverage.out -o coverage.html
    
    - name: Upload coverage
      uses: actions/upload-artifact@v4
      with:
        name: backend-coverage
        path: backend/coverage.html
    
    - name: Check test coverage
      working-directory: ./backend
      run: |
        coverage=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
        echo "Total coverage: $coverage%"
        if (( $(echo "$coverage < 80" | bc -l) )); then
          echo "Coverage is below 80%"
          exit 1
        fi

  # Backend linting
  backend-lint:
    name: Backend Linting
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: false
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
    
    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v4
      with:
        version: latest
        working-directory: backend
        args: --timeout=5m

  # Frontend build
  frontend-build:
    name: Frontend Build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: false
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Cache npm dependencies
      uses: actions/cache@v4
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
    
    - name: Install dependencies
      working-directory: ./frontend
      run: npm install
    
    - name: Build
      working-directory: ./frontend
      run: npm run build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: frontend/build

  # Docker build test
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-build]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: false
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Build backend Docker image
      uses: docker/build-push-action@v4
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: false
        tags: pack-calculator-backend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build frontend Docker image
      uses: docker/build-push-action@v4
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: false
        tags: pack-calculator-frontend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Integration test with Docker Compose
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [docker-build]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: false
    
    - name: Start services
      run: docker-compose up -d
    
    - name: Wait for services
      run: |
        echo "Waiting for backend to be ready..."
        timeout 60 bash -c 'until curl -f http://localhost:8080/health; do sleep 2; done'
        echo "Backend is ready!"
    
    - name: Run API tests
      run: |
        chmod +x test-api.sh
        ./test-api.sh
    
    - name: Show logs on failure
      if: failure()
      run: docker-compose logs
    
    - name: Stop services
      if: always()
      run: docker-compose down -v

  # Deployment (only on main branch)
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [integration-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: false
    
    - name: Deploy notification
      run: |
        echo "Ready to deploy to production"
        echo "Configure your deployment platform (Railway, Render, etc.)"
        echo "Or add deployment steps here"
    
    # Example: Deploy to Railway
    # - name: Deploy to Railway
    #   run: |
    #     npm i -g @railway/cli
    #     railway up
    #   env:
    #     RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

